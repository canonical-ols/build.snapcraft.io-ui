#! /usr/bin/python

from __future__ import print_function

import sys

from launchpadlib.credentials import (
    CredentialStore,
    RequestTokenAuthorizationEngine,
    )
from launchpadlib.launchpad import Launchpad


class MemoryCredentialStore(CredentialStore):
    """Store OAuth credentials in memory."""

    def __init__(self, *args, **kwargs):
        super(MemoryCredentialStore, self).__init__(*args, **kwargs)
        self.store = {}

    def do_save(self, credentials, unique_key):
        self.store[unique_key] = credentials

    def do_load(self, unique_key):
        return self.store.get(unique_key)


class AuthorizeRequestTokenRemotely(RequestTokenAuthorizationEngine):
    """Ask the user to authorize the request token in a remote browser."""

    def make_end_user_authorize_token(self, credentials, request_token):
        authorization_url = self.authorization_url(request_token)
        print("Visit the authorization page in a browser logged in as the "
              "desired Launchpad user:")
        print("  {}".format(authorization_url))
        print("Press Enter here when you have authorized the token.")
        sys.stdin.readline()
        credentials.exchange_request_token_for_access_token(self.web_root)


def main():
    store = MemoryCredentialStore()
    authorization_engine = AuthorizeRequestTokenRemotely(
        "production", consumer_name="build.snapcraft.io development",
        allow_access_levels=["WRITE_PRIVATE"])
    lp = Launchpad.login_with(
        service_root="production",
        authorization_engine=authorization_engine,
        credential_store=store)
    creds = store.store.values()[0]
    print("Now set the following values in environments/development.env, and "
          "make sure to keep them private (including 'chmod 600') as they "
          "allow full access to your Launchpad account:")
    print()
    print("LP_API_USERNAME={}".format(lp.me.name))
    print("LP_API_CONSUMER_KEY='{}'".format(creds.consumer.key))
    print("LP_API_TOKEN={}".format(creds.access_token.key))
    print("LP_API_TOKEN_SECRET={}".format(creds.access_token.secret))


if __name__ == "__main__":
    main()
